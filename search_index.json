[["index.html", "Bioconductor Package Guidelines for Developers and Reviewers About Bioconductor", " Bioconductor Package Guidelines for Developers and Reviewers Kevin Rue-Albrecht 2021-06-02 About Bioconductor Bioconductor provides tools for the analysis and comprehension of high-throughput genomic data (Huber et al. 2015). Bioconductor uses the statistical programming language (R Core Team 2021), and is open source and open development. It has two releases each year, and an active user community. Bioconductor is also available as an AMI (Amazon Machine Image) and Docker images. References "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction version 1.0.0 June 2021 The Bioconductor project promotes high-quality, well documented, and interoperable software. These guidelines help to achieve this objective; they are not meant to put undue burden on package authors, and authors having difficultly satisfying guidelines should seek advice on the bioc-devel mailing list. Package maintainers are urged to follow these guidelines as closely as possible when developing Bioconductor packages. General instructions for producing packages can be found in the Writing R Extensions manual, available from within (RShowDoc(\"R-exts\")) or on the R web site. Remember these are the minimum requirements for package acceptance and the package will still be subject to other guidelines below and a formal technical review by trained Bioconductor package reviewer. "],["general.html", "Chapter 2 General Package Development 2.1 Version of Bioconductor and 2.2 Correctness, Space and Time 2.3 R CMD check environment 2.4 README file", " Chapter 2 General Package Development 2.1 Version of Bioconductor and Package developers should always use the devel version of Bioconductor when developing and testing packages to be contributed. Depending on the release cycle, using Bioconductor devel may or may not involve also using the devel version of . See the how-to on using devel version of Bioconductor for up-to-date information. 2.2 Correctness, Space and Time 2.2.1 R CMD build Bioconductor packages must minimally pass R CMD build (or R CMD INSTALL --build) and pass R CMD check with no errors and no warnings using a recent R-devel. Authors should also try to address all errors, warnings, and notes that arise during build or check.1 2.2.2 BiocCheck Packages must also pass BiocCheck::BiocCheckGitClone() and BiocCheck::BiocCheck() with no errors and no warnings. The BiocCheck package is a set of tests that encompass Bioconductor Best Practices. Every effort should be made to address any notes that arise during this build or check.2 2.2.3 File names Do not use filenames that differ only in case, as not all file systems are case-sensitive. 2.2.4 Package size The source package resulting from running R CMD build should occupy less than 5 MB on disk. 2.2.5 Check duration The package should require less than 10 minutes to run R CMD check --no-build-vignettes. Using the --no-build-vignettes option ensures that the vignette is built only once.3 2.2.6 Memory Vignette and man page examples should not use more than 3 GB of memory since cannot allocate more than this on 32-bit Windows. 2.2.7 Individual file size For software packages, individual files must be &lt;= 5MB. This restriction exists even after the package is accepted and added to the Bioconductor repository. 2.2.8 Undesirable files The raw package directory should not contain unnecessary files, system files, or hidden files such as .DS_Store, .project, .git, cache files, log files, *.Rproj, *.so, etc. These files may be present in your local directory but should not be commited to git (see .gitignore). 2.3 R CMD check environment It is possible to activate or deactivate a number of options in R CMD build and R CMD check. Options can be set as individual environment variables or they can be listed in a file. Descriptions of all the different options available can be found here. Bioconductor has chosen to customize some of these options for incoming submission during R CMD check. The file of utilized flags can be downloaded from GitHub. The file can either be placed in a default directory as directed here or can be set through environment variable R_CHECK_ENVIRON with a command similar to: export R_CHECK_ENVIRON = &lt;path to downloaded file&gt; 2.4 README file If a README file is included in the package or the Github repository and it provides installation instructions, those instruction should also include Bioconductor installation instructions. If a README.Rmd is provided (rather than README.md, or other) those installation instructions should be in an eval=FALSE code chunk. Nowhere in the code ( code, man pages, vignettes, Rmd files) should someone try to install or download system dependencies, applications, packages, etc. Developers can provide instructions to follow but not executed and should assume all necessary dependencies, applications, or packages are already set up on a user’s system. The Bioconductor team member assigned to review the package during the submission process will expect all ERROR, WARNINGS, and NOTES to be addressed. If there are any remaining, a justification of why they are not corrected will be expected.↩︎ The Bioconductor team member assigned to review the package during the submission process will expect all ERROR, WARNINGS, and NOTES to be addressed. If there are any remaining, a justification of why they are not corrected will be expected.↩︎ This is true only for Software Packages. Experiment Data, Annotation, and Workflow packages are allowed additional space and check time.↩︎ "],["description.html", "Chapter 3 The DESCRIPTION file 3.1 Fields", " Chapter 3 The DESCRIPTION file The DESCRIPTION file must be properly formatted. The following section will review some important notes regarding fields of the DESCRIPTION file and associated files. 3.1 Fields 3.1.1 Package This is the name of the package. This should match the GitHub repository name and is case-sensitive. A package name should be descriptive and should not already exist as a current package (case-insensitive) in Bioconductor nor CRAN. Avoid names that are easily confused with existing package names, or that imply a temporal (e.g., ExistingPackage2) or qualitative (e.g., ExistingPackagePlus) relationship. An easy way to check whether your name is already in use is to check that the following command fails: if (!requireNamespace(&quot;BiocManager&quot;)) { install.packages(&quot;BiocManager&quot;) } BiocManager::install(&quot;MyPackage&quot;) 3.1.2 Title This is a brief but descriptive title for the package. 3.1.3 Version All Bioconductor packages use an x.y.z version scheme. See Version Numbering for specifics to how the release and devel Bioconductor versioning proceeds. When first submitted to Bioconductor, a package should have pre-release version 0.99.0. The following rules apply: x is usually 0 for packages that have not yet been released. y is even for packages in release, and odd for packages in devel. Generally, do not bump this number especially in pre-release. z is incremented whenever committing changes to a package. 3.1.4 Description The description should be a relatively short but detailed overview of what the package functionality entails. It should be at least three complete sentences. 3.1.5 Authors@R The Authors@R field should be used. A maintainer designation (cre for Authors@R) is required with an actively maintained email address. This email address will be used for contact regarding any issues that arise with the package in the future. For persons with an ORCiD identifier provide the identifier via an element named “ORCID” in the comment argument of person(). For example: person(&quot;Lori&quot;, &quot;Shepherd&quot;, email = Lori.Shepherd@roswellpark.org, role = c(&quot;cre&quot;, &quot;aut&quot;), comment = c(ORCID = &quot;0000-0002-5910-4010&quot;)) Only one person should be listed as the Maintainer to ensure a single point of contact. This person by default will have commit access to the git repository on git.bioconductor.org. Commit access can be given to other developers by request on the bioc-devel mailing list. Another option is to add collaborators to the GitHub repository. This approach enables development by many but restricts push access to git.bioconductor.org. 3.1.6 License The license field should preferably refer to a standard license (see wikipedia) using one of ’s standard specifications. Be specific about any version that applies (e.g., GPL-2). Licenses restricting use, e.g., to academic or non-profit researchers, are not suitable for Bioconductor. Core Bioconductor packages are typically licensed under Artistic-2.0. To specify a non-standard license, include a file named LICENSE in your package (containing the full terms of your license) and use the string file LICENSE in this License: field. The package should contain only code that can be redistributed according to the package license. Be aware of the licensing agreements for packages you are depending on in your package. Not all packages are open source even if they are publicly available. 3.1.7 LazyData For packages that include data, we recommend not including LazyData: TRUE. However, this rarely proves to be a good thing. In our experience it only slows down the loading of packages with large data. 3.1.8 Depends, Imports, Suggests, Enhances All packages must be available via Bioconductor or CRAN; the use of the Remotes: field is not supported, hence dependencies only available on other repositories (e.g.  GitHub) are not allowed. Reuse, rather than re-implement or duplicate, well-tested functionality from other packages. Make use of appropriate existing packages (e.g., biomaRt, AnnotationDbi, Biostrings) and classes (e.g., SummarizedExperiment, GRanges, Rle, DNAStringSet), and avoid duplication of functionality available in other Bioconductor packages. See Common Bioconductor Methods and Classes. Bioconductor reviewers are very strict on this point! New packages should be interoperable with existing Bioconductor classes and should not reimplement functionality especially with regards to importing/reading data. A package can be listed only once between Depends:, Imports:, Suggests:, or Enhances:. Determine placement of package based on the following guidelines: Imports: is for packages that provide functions, methods, or classes that are used inside your package name space. Most packages are listed here. Depends: is for packages that provide essential functionality for users of your package, e.g., the GenomicRanges package is listed in the Depends: field of GenomicAlignments. It is unusual for more than three packages to be listed as Depends:. Suggests: is for packages used in vignettes, examples, and in conditional code. Commonly, annotation and experiment packages (e.g., TxDb*) used in vignette and example code are included in this field thus avoiding users a costly download. In the case where an external one-off function is required for package code, external package availability can be checked via if (!requireNamespace('extraPKG')) stop(...). Enhances: is for packages such as Rmpi or parallel that enhance the performance of your package, but are not strictly needed for its functionality. It is seldom necessary to specify or specific versions as dependencies, since the Bioconductor release strategy and standard installation instructions guarantee these constraints. Repositories mirrored outside Bioconductor should include branches for each Bioconductor release, and may find it useful to fully specify versions to enforce constraints otherwise guaranteed by Bioconductor installation practices. 3.1.9 SystemRequirements This field is for listing any external software which is required, but not automatically installed by the normal package installation process. If the installation process is non-trivial, a top-level README file should be included to document the process. 3.1.10 biocViews This field is required! Specify at least two leaf node from biocViews. Multiple leaf terms are encouraged but terms must come from the same trunk or package type (i.e., Software, AnnotationData, ExperimentData, or Workflow). 3.1.11 BugReports It is encouraged to include the relevant links to GitHub for reporting issues. 3.1.12 URL This field directs users to source code repositories, additional help resources, etc; details are provided in the Writing R Extensions manual, RShowDoc(\"R-exts\"). 3.1.13 Video This field displays links to instructional videos. 3.1.14 Collates This may be necessary to order class and method definitions appropriately during package installation. 3.1.15 BiocType This is required if submitting a Docker or Workflow. Otherwise this field could optionally define the type of Bioconductor package Software, ExperimentData, Annotation. "],["namespace.html", "Chapter 4 The NAMESPACE file 4.1 Function names 4.2 Imported functions 4.3 Exported functions", " Chapter 4 The NAMESPACE file A NAMESPACE file defines the functions, classes, and methods that are imported into the namespace, and exported for users. In the following section we describe what Bioconductor reviewers will be looking for in this file. 4.1 Function names Exported functions should use camel case or underscoring and not include ., which indicates S3 dispatch. 4.2 Imported functions Generally importFrom() is encouraged over importing an entire package. However, if there are many functions from a single package, import() can be acceptable. 4.3 Exported functions Exporting all functions with exportPattern(\"^[[:alpha:]]+\") is strongly discouraged. Functions and generics should be exported individually, for clarity and control. "],["news.html", "Chapter 5 The NEWS file", " Chapter 5 The NEWS file A NEWS file should be included to keep track of changes to the code from one version to the next. It can be a top level file or in the inst/ directory. Only one NEWS file should exist in the repository. The following are acceptable locations and formats: location format ./inst/NEWS.Rd \\(\\LaTeX\\) ./inst/NEWS formatted text see ?news ./inst/NEWS.md markdown ./NEWS.md markdown ./NEWS formatted text see ?news Specifics on formatting can be found on the help page for ?news. Bioconductor uses the NEWS file to create the semi-annual release announcement. It must include list elements and cannot be a plain text file. An example format: Changes in version 0.99.0 (2018-05-15) + Submitted to Bioconductor Changes in version 1.1.1 (2018-06-15) + Fixed bug. Begin indexing from 1 instead of 2 + Made the following significant changes o added a subsetting method o added a new field to database After you install your package, the following can be run to see if the NEWS is properly formatted: utils::news(package=&quot;&lt;name of your package&gt;&quot;) The output should look similar to the following: Changes in version 1.1.1 (2018-06-15): o Fixed bug. Begin indexing from 1 instead of 2 o Made the following significant changes o added a subsetting method o added a new field to database Changes in version 0.99.0 (2018-05-15): o Submitted to Bioconductor If you get something like the following there are formatting errors that need to be corrected: Version: 0.99.0 Date: 2018-05-15 Text: Submitted to Bioconductor Version: 1.1.1 Date: 2018-06-15 Text: Fixed bug. Begin indexing from 1 instead of 2 Version: 1.1.1 Date: 2018-06-15 Text: Made the following significant changes o added a subsetting method o added a new field to database "],["citation.html", "Chapter 6 The CITATION file", " Chapter 6 The CITATION file Appropriate citations must be included in help pages (e.g., in the see also section) and vignettes; this aspect of documentation is no different from any scientific endeavor. The file inst/CITATION can be used to specify how a package is to be cited. If this option is utilized, a maintainer can check proper formatting of the CITATION file by running readCitationFile(\"inst/CITATION\"); This must run without error for the citation to be accurately displayed on the package landing page. Whether or not a CITATION file is present, an automatically-generated citation will appear on the package landing page on the Bioconductor web site. For optimal formatting of author names (if a CITATION file is not present), specify the package author and maintainer using the Authors@R field as described in the Writing R Extensions manual. "],["data.html", "Chapter 7 Package data 7.1 Experiment Data Package 7.2 Adding Data to Existing Package", " Chapter 7 Package data When developing a software package, an excellent practice is to give a comprehensive illustration of the methods in the package using an existing experiment data package, annotation data or data in the ExperimentHub or AnnotationHub, or submitting new data to those resources yourself. If existing data is not available or applicable, or a new smaller dataset is needed for examples in the package, data can be included either as a separate data package (for larger amounts of data) or within the package (for smaller datasets). 7.1 Experiment Data Package Experimental data packages contain data specific to a particular analysis or experiment. They often accompany a software package for use in the examples and vignettes and in general are not updated regularly. If you need a general subset of data for workflows or examples first check the AnnotationHub resource for available files (e.g., BAM, FASTA, BigWig, etc.). Bioconductor strongly encourages creating an experiment data package that utilizes ExperimentHub or AnnotationHub (See Creating an Experiment Hub Package or Creating an Annotation Hub Package) but a traditional package that encapsulates the data is also acceptable. See the Package Submission guidelines for submitting related packages. 7.2 Adding Data to Existing Package Bioconductor strongly encourages the use of existing datasets, but if not available data can be included directly in the package for use in the examples found in man pages, vignettes, and tests of your package. This is a good reference by Hadley Wickham about data. However, as mentioned in The DESCRIPTION file chapter, Bioconductor does not encourage using LazyData: True despite its recommendataion in this article. Some key points are summarized in the following sections. 7.2.1 Exported Data and the data/ directory Data in data/ is exported to the user and readily available. It is made available in an session through the use of data(). It will require documentation concerning its creation and source information. It is most often a .RData file created with save() but other types are acceptable as well, see ?data(). Please remember to compress the data. 7.2.2 Raw Data and the inst/extdata/ directory It is often desirable to show a workflow which involves the parsing or loading of raw files. Bioconductor recommends finding existing raw data already provided in another package or the hubs. However, if this is not applicable, raw data files should be included in the inst/extdata directory. Files of these type are often accessed utilizing system.file(). Bioconductor requires documentation on these files in an inst/script/ directory. 7.2.3 Internal data Rarely, a package may require parsed data that is used internal but should not be exported to the user. An R/sysdata.rda is often the best place to include this type of data. 7.2.4 Other data Downloads of files and external data from the web should be avoided. If it is necessary, at minimum the files should be cached. See BiocFileCache for Bioconductor recommended package for caching of files. "],["docs.html", "Chapter 8 Documentation 8.1 Vignettes 8.2 Man pages 8.3 The inst/script/ directory", " Chapter 8 Documentation Package documentation is important for users to understand how to work with your code. Bioconductor requires: a vignette with executable code that demonstrates how to use the package to accomplish a task, man pages for all exported functions with runnable examples, well documented data structures especially if not a pre-exiting class well documented datasets for data provided in data/ and in inst/extdata/. References to the methods used as well as to other similar or related projects and packages is also expected. If data structures differ from similar packages, Bioconductor reviewers will expect some justification as to why. Keep in mind it is always possible to extend existing classes. 8.1 Vignettes A vignette demonstrates how to accomplish non-trivial tasks embodying the core functionality of your package. There are two common types of vignettes. A Sweave vignette is an .Rnw file that contains \\(\\LaTeX\\) and chunks of code. The code chunk starts with a line &lt;&lt;&gt;&gt;=, and ends with @. Each chunk is evaluated during R CMD build, prior to \\(\\LaTeX\\) compilation to a PDF document. An R markdown vignette is similar to a Sweave vignette, but uses markdown instead of \\(\\LaTeX\\) for structuring text sections and resulting in HTML output. The knitr package can process most Sweave and all R markdown vignettes, producing pleasing output. Refer to Writing package vignettes for technical details. See the BiocStyle package for a convenient way to use common macros and a standard style. A vignette provides reproducibility: the vignette produces the same results as copying the corresponding commands into an session. It is therefore essential that the vignette embed executed code. Shortcuts (e.g., using a \\(\\LaTeX\\) verbatim environment, or using the Sweave eval=FALSE flag, or equivalent tricks in markdown) undermine the benefit of vignettes and are generally not allowed; exceptions can be made with proper justification and are at the discretion of Bioconductor reviewers. All packages are required to have at least one vignette. Vignettes go in the vignettes/ directory of the package. Vignettes are often used as standalone documents, so best practices are to include an informative title, the primary author of the vignette, the last modification date of the vignette, and a link to the package landing page. We encourage the use of BiocStyle for formatting. Some best practices for writing Bioconductor vignettes are detailed in the following sections. 8.1.1 Introduction Add an “Introduction” section that serves as an abstract to introduce the objective, models, unique functions, key points, etc that distinguish the package from other packages in the same area. 8.1.2 Installation Add an “Installation” section that show to users how to download and load the package from Bioconductor. These instructions and any installations instructions should be in an eval=FALSE code chunk. No where in the code ( code, man pages, vignettes, Rmd files) should someone try to install or download system dependencies, applications, packages, etc. Developers can provide instructions to follow in unevaluated code chunks, and should assume all necessary dependencies, applications or packages are already set up on a user’s system. 8.1.3 Table of contents If appropriate, we strongly encourage a table of contents 8.1.4 Evaluated code chunks Non-trival executable code is a must!!! Static vignettes are not acceptable. 8.1.5 Session information Include a section with the SessionInfo() 8.1.6 vignettes/ directory and intermediate files Only the source vignette file (.Rnw or .Rmd) and any necessary static images should be in the vignette directory. No intermediate files should be present. 8.1.7 References Remember to include any relevant references to methods. 8.2 Man pages See the Writing R Extensions section on man pages for detailed instruction or format information for documenting a package, functions, classes, and data sets. All help pages should be comprehensive. 8.2.1 Functions and classes All exported functions and classes need will have a man page. Man pages describing new classes must be very detailed on the structure and the type of information that is stored. 8.2.2 Package-level documentation Bioconductor encourages having a package man page with an overview of the package and links to the main functions. 8.2.3 Data Data man pages must include provenance information and data structure information. 8.2.4 Examples All man pages should have an runnable examples. The use of donttest and dontrun is discouraged and generally not allowed; exceptions can be made with proper justification and are at the discretion of Bioconductor reviewers. If this option is used it will also be preferable to use donttest instead of dontrun; donttest requires valid code while dontrun does not. 8.3 The inst/script/ directory The scripts in this directory can vary. Most importantly if data was included in the inst/extdata/ directory, a related script must be present in this directory documenting very clearly how the data was generated. It should include source URLs and any key information regarding filtering or processing. It can be executable code, sudo code, or a text description. Users should be able to download and be able to roughly reproduce the file or object that is present as data. "],["tests.html", "Chapter 9 Unit tests", " Chapter 9 Unit tests Unit tests are highly recommended. We find them indispensable for both package development and maintenance. Two of the main frameworks for testing are RUnit and testthat. Examples and explanations are provided here. There is also the opportunity to create a full testing suite more in depth than traditional testing guidelines but this will require the use of long tests. If a package developer is considering the use of long tests we highly recommend reaching out on the bioc-devel mailing list to ensure proper use and justification. "],["r-code.html", "Chapter 10 R code 10.1 License 10.2 R CMD check and BiocCheck", " Chapter 10 R code Everyone has their own coding style and formats. There are however some best practice guidelines that Bioconductor reviewers will look for (see coding style). There are also some other key points, detailed in the following sections. 10.1 License Only contain code that can be distributed under the license specified (see also The DESCRIPTION file). 10.2 R CMD check and BiocCheck Many common coding and sytax issues are flagged in R CMD check and BiocCheck() (see the R CMD check cheatsheet and BiocCheck vignette. Some of the more prominent offenders: Use vapply() instead of sapply(), and use the various apply functions instead of for loops. Use seq_len() or seq_along() instead of 1:.... Use TRUE and FALSE instead of T and F. Use of numeric indices (rather than robust named indices). Use is() instead of class() == and class() !=. Use system2() instead of system(). Do not use set.seed() in any internal code. Do not use browser() in any internal code. Avoid the use of &lt;&lt;-. Avoid use of direct slot access with @ or slot(). Accessor methods should be created and utilized Use the packages ExperimentHub and AnnotationHub instead of downloading external data from unsanctioned providers such as GitHub, Dropbox, etc. Use &lt;- instead of = for assigning variables outside function calls. 10.2.1 Formatting and syntax Use &lt;- instead of = for assignment. Function names should be camelCase or utilize the underscore _ and not have a dot . (which indicates S3 dispatch). Use dev.new() to start a graphics drive if necessary. Avoid using x11() or X11(), for it can only be called on machines that have access to an X server. Use the functions message(), warning() and error(), instead of the cat() function (except for customized show() methods). paste0() should generally not be used in these methods except for collapsing multiple values from a variable. 10.2.2 Re-use functionality and classes Avoid re-implementing functionality or classes (see also The DESCRIPTION file). Make use of appropriate existing packages (e.g., biomaRt, AnnotationDbi, Biostrings, GenomicRanges) and classes (e.g., SummarizedExperiment, AnnotatedDataFrame, GRanges, DNAStringSet) to avoid duplication of functionality available in other Bioconductor packages. See also Common Bioconductor Methods and Classes. This encourages interoperability and simplifies your own package development. If a new representation is needed, see the Essential S4 interface section of Robust and Efficient Code. In general, Bioconductor will insist on interoperability with Common Classes for acceptance. 10.2.3 Functional programming Avoid large chunks of repeated code. If code is being repeated this is generally a good indication a helper function could be implemented. 10.2.4 Function length Excessively long functions should also be avoided. Write small functions. It is best if each function has only one job that it needs to do. And it is also best if that function does that job in as few lines of code as possible. If you find yourself writing great long functions that extend for more than a screen, then you should probably take a moment to split it up into smaller helper functions. Smaller functions are easier to read, debug and to reuse. 10.2.5 Function arguments Argument names to functions should be descriptive and well documented. Arguments should generally have default values. Check arguments against a validity check. 10.2.6 Vectorization Vectorize! Many R operations are performed on the whole object, not just the elements of the object (e.g., sum(x) instead of x[1] + x[2] + x[2] + ...). In particular, relatively few situations require an explicit for loop. See the Vectorize section of Robust and Efficient Code for additional detail. 10.2.7 Web resources Follow guiding principles on Querying Web Resources, if applicable. 10.2.8 Parallelisation For parallel implementation please use BiocParallel. See also the Parallel Recommendations section of Robust and Efficient Code. A minimal number of cores (1 or 2) should be set as a default. 10.2.9 File caching Files downloaded should be cached. Please use BiocFileCache. 10.2.10 Additional files and dependencies Do NOT install anything on a users system. System dependencies, applications, and additionally needed packages should be assumed already present on the user’s system. If necessary, package maintainers should provide instructions for download and setup, but should not execute those instructions on behalf of a user. "],["c-fortran.html", "Chapter 11 C and Fortran code", " Chapter 11 C and Fortran code If the package contains C or Fortran code, it should adhere to the standards and methods described in the System and foreign language interfaces section of the “Writing R Extensions” manual. We emphasie particular points in the following sections. 11.0.1 Internal functions Use internal functions, e.g., R_alloc and random number generators (RNGs), over system-supplied ones. 11.0.2 C function registration Use C function registration (See the Registering native routines section of the “Writing R Extensions” manual). 11.0.3 Checks for user interruption Use R_CheckUserInterrupt() in C level loops when there is a chance that they may not terminate for certain parameter settings or when their run time exceeds 10 seconds with typical parameter settings, and the method is intended for interactive use. 11.0.4 Makevars Make judicious use of the Makevars and Makefile files within a package. These are often not required at all (See the Configure and cleanup section of the “Writing R Extensions” manual). 11.0.5 Warnings and optimizations During package development, enable all warnings and disable optimizations. If you plan to use a debugger, tell the compiler to include debugging symbols. The easiest way to enforce these is to create a user-level Makevars file user’s home directory in a sub-directory called ‘.R’). See examples below for flags for common toolchains. Consult the section about Makevars files in the Writing R Extensions Manual manual. Example for gcc/g++: CFLAGS=-Wall -Wextra -pedantic -O0 -ggdb CXXFLAGS=-Wall -Wextra -pedantic -O0 -ggdb FFLAGS=-Wall -Wextra -pedantic -O0 -ggdb Example for clang/clang++: CFLAGS=-Weverything -O0 -g CXXFLAGS=-Weverything -O0 -g FFLAGS=-Wall -Wextra -pedantic -O0 -g "],["third-party-code.html", "Chapter 12 Third-party code", " Chapter 12 Third-party code Use of external libraries whose functionality is redundant with libraries already supported is strongly discouraged. In cases where the external library is complex, the author may need to supply pre-built binary versions for some platforms. By including third-party code a package maintainer assumes responsibility for maintenance of that code. Part of the maintenance responsibility includes keeping the code up to date as bug fixes and updates are released for the mainline third-party project. For guidance on including code from some specific third-party sources, see the external code sources section of the C++ Best Practices guide. "],["shiny.html", "Chapter 13 Shiny apps", " Chapter 13 Shiny apps Shiny apps are allowable. Please have all relevant code in the main R/ directory of the package. The bulk of the package code should not be implemented within the Shiny app directly. "],["gitignore.html", "Chapter 14 The .gitignore file", " Chapter 14 The .gitignore file Bioconductor requires a Git repository for submission. There are certain system files that should not be tracked by the repository and are unacceptable to include. These files can remain on a local system but should be excluded from the Git repository which is possible by including a .gitignore file. The following are files that are checked by Bioconductor and flagged as unacceptable: hidden_file_ext = c( &quot;.renviron&quot;, &quot;.rprofile&quot;, &quot;.rproj&quot;, &quot;.rproj.user&quot;, &quot;.rhistory&quot;, &quot;.rapp.history&quot;, &quot;.o&quot;, &quot;.sl&quot;, &quot;.so&quot;, &quot;.dylib&quot;, &quot;.a&quot;, &quot;.dll&quot;, &quot;.def&quot;, &quot;.ds_store&quot;, &quot;unsrturl.bst&quot;, &quot;.log&quot;, &quot;.aux&quot;, &quot;.backups&quot;, &quot;.cproject&quot;, &quot;.directory&quot;, &quot;.dropbox&quot;, &quot;.exrc&quot;, &quot;.gdb.history&quot;, &quot;.gitattributes&quot;, &quot;.gitmodules&quot;, &quot;.hgtags&quot;, &quot;.project&quot;, &quot;.seed&quot;, &quot;.settings&quot;, &quot;.tm_properties&quot; ) "],["conclusion.html", "Chapter 15 Conclusion", " Chapter 15 Conclusion The exercise How to a Build Bioconductor Package with RStudio may also be helpful. Remember that every Bioconductor package goes through a formal review process and may still receive technical feedback from the assigned Bioconductor reviewer. An overview of the submission process may be found here and a package may be submitted to the GitHub package submission repository. Thank you for reading these guidelines, and welcome to the Bioconductor community of users and developers! "],["references-1.html", "References", " References "],["changelog.html", "Changelog 15.1 Version 1.0.0", " Changelog 15.1 Version 1.0.0 Initial definition of the package development guidelines based on bioc package guidelines. "],["news-1.html", "A NEWS A.1 Version 1.0.0", " A NEWS A.1 Version 1.0.0 Initial definition of the package development guidelines based on bioc package guidelines. "]]
